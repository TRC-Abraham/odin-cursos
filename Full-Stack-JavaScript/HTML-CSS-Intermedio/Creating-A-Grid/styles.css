main {
    display: grid;
    justify-items: center;
    margin-top: 10px;
}

.container, .list, .container-2 {
    display: grid;
}

.list {
    list-style: none;
    padding: 0;
}

.item-list {
    padding: 15px;
}

/* .list {
    grid-template-columns: 50px 50px;
    grid-template-rows: 50px 50px;
} */

/*grid-template-columns: define nuestras columnas*/
/*grid-template-rows: define nuestras filas*/

/*Si queremos agregar mas columnas o filas a nuestra grid basta con definir esos valores en su respectiva propiedad "grid-template-columns: o en grid-template-rows:"*/

/* .list {
    grid-template: 50px 50px / 50px 50px 50px;
} */

/* La propiedad anterior es la version "shorthand" */

/* .list {
    grid-template: 50px 50px / 250px 50px 50px;
} */

/*Los items-grid no necesitan contar con las misma dimensiones*/

/* .list {
    grid-template-columns: 50px 50px;
    grid-template-rows: 50px 50px;
    grid-auto-rows: 50px;
}
 */
/*Si nosotros solo agregamos más elementos en la lista directamente en el html, que los 4 items-list previos. Estos automáticamente se acomodaran en una nueva row que no definimos. Ya que esto queda implícito*/

/* Sin embargo, los nuevos elementos no contaran con los valores de la propiedades ya dadas, por ello se debe de usar la propiedad grid-auto-rows */

.list {
    grid-template-columns: 50% 50%;
    grid-template-rows: 50% 50%;
    grid-auto-rows: 50%;
    gap: 25px;
}

.item-list:nth-child(odd) {
    background-color: aqua;
}

.item-list:nth-child(even) {
    background-color: lightgreen;
}

/* La propiedad row-gap y column-gap, definen la separación entre filas y columnas respectivamente.

La propiedad shorthand es "gap". */

/* Propiedades de "grid-debug.html" */

/* .container-2 {
    width: 80vw;
    height: 80vh;
    border: 2px solid darkgray;
    padding: 10px;
    margin: 50px;
    grid-template: 100px 1fr / 1fr 2fr;
} */

/* La unidad "fr" permite facilita el como distribuir una longitud, ya que a diferencia de usar % o px; esta unidad tomo en cuenta las medidas del viewport (espacio libre)y de haberlos, de los elementos adyacentes. Por lo que es más rápido y fácil maquetar usando fr, ademas de que es una unidad responsive por si misma.*/

/* .head {
    grid-column: 1 / 3;
    grid-row: 1 / 2;
}

.side-left {
    grid-column: 1 / 2;
    grid-row: 2 / 3;
}

.main {
    grid-column: 2 / 3;
    grid-row: 2 / 3;
} */

/* Las propiedades "grid-column" y "grid-row" nos permiten indicar desde que columna a que columna y desde que fila hasta que fila se extiende los elementos señalados */

/* Con el inspeccionador de elementos podemos renombrar los ejes mostrados de la grid css. Escribiendo lo siguiente:

elemento padre {
    grid-template: 100px 1fr / [start]1fr [middle]2fr [end];
}

Esto aplica tanto para los ejes verticales como para los horizontales. */

.container-2 {
    width: 80vw;
    height: 80vh;
    border: 2px solid darkgray;
    padding: 10px;
    margin: 50px;
    grid-template: 100px 1fr / [start]1fr [middle]2fr [end];
    grid-template-areas:
        "top top"
        "side main";
}

/* grid-template-areas:
        Fila-1= "top(100px) top(1fr)" /
        Fila-2= "side(1fr) main(2fr)"; */

/* En Fila-1 Nosotros estamos indicando que la primera area definida se llamara "top" y que ocupara el area de 100px, pero como nosotros repetimos una vez mas "top" estamos indicando que ocupara el area de 100px + 1fr. Entonces terminara ocupando el area de las dos columnas que establecimos en "grid-template" */

/* En Fila-2 Estamos indicando que la siguiente area se llamara "side" y que esta ocupara el area de 1fr. Y luego indicamos que la siguiente area se llamara "main" y que esta ocupara el area dee 2fr */

/* Esto no solo nos permite delimitar de forma clara y visual las areas de nuestra maqueta, si no que, también no permite dimensionar nuestros elementos de forma aun mas rápida y sencilla */

.head {
    grid-area: top;
}

.side-left {
    grid-area: side;
}

.main {
    grid-area: main;
}

